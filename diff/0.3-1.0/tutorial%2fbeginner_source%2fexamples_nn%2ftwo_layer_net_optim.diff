
diff --git a/tutorial/beginner_source/examples_nn/two_layer_net_optim.py b/tutorial/beginner_source/examples_nn/two_layer_net_optim.py
index fd13002..62c44cd 100644
--- a/tutorial/beginner_source/examples_nn/two_layer_net_optim.py
+++ b/tutorial/beginner_source/examples_nn/two_layer_net_optim.py
@@ -14,15 +14,14 @@ for us. The optim package defines many optimization algorithms that are commonly
 used for deep learning, including SGD+momentum, RMSProp, Adam, etc.
 """
 import torch
-from torch.autograd import Variable
 
 # N is batch size; D_in is input dimension;
 # H is hidden dimension; D_out is output dimension.
 N, D_in, H, D_out = 64, 1000, 100, 10
 
-# Create random Tensors to hold inputs and outputs, and wrap them in Variables.
-x = Variable(torch.randn(N, D_in))
-y = Variable(torch.randn(N, D_out), requires_grad=False)
+# Create random Tensors to hold inputs and outputs
+x = torch.randn(N, D_in)
+y = torch.randn(N, D_out)
 
 # Use the nn package to define our model and loss function.
 model = torch.nn.Sequential(
@@ -30,12 +29,12 @@ model = torch.nn.Sequential(
     torch.nn.ReLU(),
     torch.nn.Linear(H, D_out),
 )
-loss_fn = torch.nn.MSELoss(size_average=False)
+loss_fn = torch.nn.MSELoss(reduction='sum')
 
 # Use the optim package to define an Optimizer that will update the weights of
 # the model for us. Here we will use Adam; the optim package contains many other
 # optimization algoriths. The first argument to the Adam constructor tells the
-# optimizer which Variables it should update.
+# optimizer which Tensors it should update.
 learning_rate = 1e-4
 optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)
 for t in range(500):
@@ -44,7 +43,7 @@ for t in range(500):
 
     # Compute and print loss.
     loss = loss_fn(y_pred, y)
-    print(t, loss.data[0])
+    print(t, loss.item())
 
     # Before the backward pass, use the optimizer object to zero all of the
     # gradients for the variables it will update (which are the learnable
