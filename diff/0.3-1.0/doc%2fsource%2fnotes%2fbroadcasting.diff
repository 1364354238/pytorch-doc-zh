
diff --git a/doc/source/notes/broadcasting.rst b/doc/source/notes/broadcasting.rst
index fee71c2..40e0adc 100644
--- a/doc/source/notes/broadcasting.rst
+++ b/doc/source/notes/broadcasting.rst
@@ -19,17 +19,17 @@ Two tensors are "broadcastable" if the following rules hold:
 
 For Example::
 
-    >>> x=torch.FloatTensor(5,7,3)
-    >>> y=torch.FloatTensor(5,7,3)
+    >>> x=torch.empty(5,7,3)
+    >>> y=torch.empty(5,7,3)
     # same shapes are always broadcastable (i.e. the above rules always hold)
 
-    >>> x=torch.FloatTensor()
-    >>> y=torch.FloatTensor(2,2)
+    >>> x=torch.empty((0,))
+    >>> y=torch.empty(2,2)
     # x and y are not broadcastable, because x does not have at least 1 dimension
 
     # can line up trailing dimensions
-    >>> x=torch.FloatTensor(5,3,4,1)
-    >>> y=torch.FloatTensor(  3,1,1)
+    >>> x=torch.empty(5,3,4,1)
+    >>> y=torch.empty(  3,1,1)
     # x and y are broadcastable.
     # 1st trailing dimension: both have size 1
     # 2nd trailing dimension: y has size 1
@@ -37,8 +37,8 @@ For Example::
     # 4th trailing dimension: y dimension doesn't exist
 
     # but:
-    >>> x=torch.FloatTensor(5,2,4,1)
-    >>> y=torch.FloatTensor(  3,1,1)
+    >>> x=torch.empty(5,2,4,1)
+    >>> y=torch.empty(  3,1,1)
     # x and y are not broadcastable, because in the 3rd trailing dimension 2 != 3
 
 If two tensors :attr:`x`, :attr:`y` are "broadcastable", the resulting tensor size
@@ -52,19 +52,19 @@ is calculated as follows:
 For Example::
 
     # can line up trailing dimensions to make reading easier
-    >>> x=torch.FloatTensor(5,1,4,1)
-    >>> y=torch.FloatTensor(  3,1,1)
+    >>> x=torch.empty(5,1,4,1)
+    >>> y=torch.empty(  3,1,1)
     >>> (x+y).size()
     torch.Size([5, 3, 4, 1])
 
     # but not necessary:
-    >>> x=torch.FloatTensor(1)
-    >>> y=torch.FloatTensor(3,1,7)
+    >>> x=torch.empty(1)
+    >>> y=torch.empty(3,1,7)
     >>> (x+y).size()
     torch.Size([3, 1, 7])
 
-    >>> x=torch.FloatTensor(5,2,4,1)
-    >>> y=torch.FloatTensor(3,1,1)
+    >>> x=torch.empty(5,2,4,1)
+    >>> y=torch.empty(3,1,1)
     >>> (x+y).size()
     RuntimeError: The size of tensor a (2) must match the size of tensor b (3) at non-singleton dimension 1
 
@@ -75,14 +75,14 @@ as a result of the broadcast.
 
 For Example::
 
-    >>> x=torch.FloatTensor(5,3,4,1)
-    >>> y=torch.FloatTensor(3,1,1)
+    >>> x=torch.empty(5,3,4,1)
+    >>> y=torch.empty(3,1,1)
     >>> (x.add_(y)).size()
     torch.Size([5, 3, 4, 1])
 
     # but:
-    >>> x=torch.FloatTensor(1,3,1)
-    >>> y=torch.FloatTensor(3,1,7)
+    >>> x=torch.empty(1,3,1)
+    >>> y=torch.empty(3,1,7)
     >>> (x.add_(y)).size()
     RuntimeError: The expanded size of the tensor (1) must match the existing size (7) at non-singleton dimension 2.
 
