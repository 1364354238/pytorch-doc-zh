
diff --git a/tutorial/beginner_source/blitz/tensor_tutorial.py b/tutorial/beginner_source/blitz/tensor_tutorial.py
index 0b104e7..b5b75d3 100644
--- a/tutorial/beginner_source/blitz/tensor_tutorial.py
+++ b/tutorial/beginner_source/blitz/tensor_tutorial.py
@@ -1,67 +1,94 @@
 # -*- coding: utf-8 -*-
 """
-什么是 PyTorch?
+What is PyTorch?
 ================
 
-它是一个基于 Python 的科学计算包, 主要是为了解决两类场景:
+It’s a Python-based scientific computing package targeted at two sets of
+audiences:
 
--  替代 NumPy 包, 以使用 GPU 的强大加速功能
--  一个深度学习研究平台, 提供最大的灵活性和速度
+-  A replacement for NumPy to use the power of GPUs
+-  a deep learning research platform that provides maximum flexibility
+   and speed
 
-让我们开始吧！
+Getting Started
 ---------------
 
-张量 (Tensors)
+Tensors
 ^^^^^^^
 
-Tensors 与 NumPy 的 ndarrays 非常相似, 但是它还可以在 GPU 上使用张量来加速计算.
+Tensors are similar to NumPy’s ndarrays, with the addition being that
+Tensors can also be used on a GPU to accelerate computing.
 """
 
 from __future__ import print_function
 import torch
 
 ###############################################################
-# 构建一个未初始化的 5x3 的矩阵:
+# Construct a 5x3 matrix, uninitialized:
 
-x = torch.Tensor(5, 3)
+x = torch.empty(5, 3)
 print(x)
 
 ###############################################################
-# 构建一个随机初始化的矩阵:
+# Construct a randomly initialized matrix:
 
 x = torch.rand(5, 3)
 print(x)
 
 ###############################################################
-# 获得 size:
+# Construct a matrix filled zeros and of dtype long:
+
+x = torch.zeros(5, 3, dtype=torch.long)
+print(x)
+
+###############################################################
+# Construct a tensor directly from data:
+
+x = torch.tensor([5.5, 3])
+print(x)
+
+###############################################################
+# or create a tensor based on an existing tensor. These methods
+# will reuse properties of the input tensor, e.g. dtype, unless
+# new values are provided by user
+
+x = x.new_ones(5, 3, dtype=torch.double)      # new_* methods take in sizes
+print(x)
+
+x = torch.randn_like(x, dtype=torch.float)    # override dtype!
+print(x)                                      # result has the same size
+
+###############################################################
+# Get its size:
 
 print(x.size())
 
 ###############################################################
 # .. note::
-#     ``torch.Size`` 实际上是一个 tuple（元组）, 所以它支持所有 tuple（元组）的操作.
-
-# 操作
+#     ``torch.Size`` is in fact a tuple, so it supports all tuple operations.
+#
+# Operations
 # ^^^^^^^^^^
-# 针对操作有许多语法. 在下面的例子中, 我们来看看加法运算.
+# There are multiple syntaxes for operations. In the following
+# example, we will take a look at the addition operation.
 #
-# 加法: 语法 1
+# Addition: syntax 1
 y = torch.rand(5, 3)
 print(x + y)
 
 ###############################################################
-# 加法: 语法 2
+# Addition: syntax 2
 
 print(torch.add(x, y))
 
 ###############################################################
-# 加法: 提供一个 output tensor 作为参数
-result = torch.Tensor(5, 3)
+# Addition: providing an output tensor as argument
+result = torch.empty(5, 3)
 torch.add(x, y, out=result)
 print(result)
 
 ###############################################################
-# 加法: in-place（就地操作）
+# Addition: in-place
 
 # adds x to y
 y.add_(x)
@@ -69,37 +96,45 @@ print(y)
 
 ###############################################################
 # .. note::
-#     任何改变张量的操作方法都是以后缀 ``_`` 结尾的. 
-#     例如: ``x.copy_(y)``, ``x.t_()``, 将替换 x.
+#     Any operation that mutates a tensor in-place is post-fixed with an ``_``.
+#     For example: ``x.copy_(y)``, ``x.t_()``, will change ``x``.
 #
-# 你可以使用标准的 NumPy 索引或者其他花里胡哨的方法！
+# You can use standard NumPy-like indexing with all bells and whistles!
 
 print(x[:, 1])
 
 ###############################################################
-# 改变大小: 如果你想要去 resize/reshape tensor, 可以使用 ``torch.view``:
+# Resizing: If you want to resize/reshape tensor, you can use ``torch.view``:
 x = torch.randn(4, 4)
 y = x.view(16)
-z = x.view(-1, 8)  # size -1 是从其他维度得出的
+z = x.view(-1, 8)  # the size -1 is inferred from other dimensions
 print(x.size(), y.size(), z.size())
 
 ###############################################################
-# **稍后阅读:**
+# If you have a one element tensor, use ``.item()`` to get the value as a
+# Python number
+x = torch.randn(1)
+print(x)
+print(x.item())
+
+###############################################################
+# **Read later:**
 #
 #
-#   100+ Tensor 操作, 包括换位, 索引, 切片, 数学运算, 线性代数, 随机数, 等等., 
-#   都在 `here <http://pytorch.org/docs/torch>`_ 有描述.
-#   
+#   100+ Tensor operations, including transposing, indexing, slicing,
+#   mathematical operations, linear algebra, random numbers, etc.,
+#   are described
+#   `here <https://pytorch.org/docs/torch>`_.
 #
 # NumPy Bridge
 # ------------
 #
-# 将一个 Torch Tensor 转换为 NumPy 数组, 反之亦然.
+# Converting a Torch Tensor to a NumPy array and vice versa is a breeze.
 #
-# Torch Tensor 和 NumPy 数组将会共享他们的 will share their 潜在内存位置, 改变一个另一个也会跟着改变.
+# The Torch Tensor and NumPy array will share their underlying memory
+# locations, and changing one will change the other.
 #
-# 
-# 将一个 Torch Tensor 转换为 NumPy 数组
+# Converting a Torch Tensor to a NumPy Array
 # ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
 a = torch.ones(5)
@@ -108,21 +143,20 @@ print(a)
 ###############################################################
 #
 
-
 b = a.numpy()
 print(b)
 
 ###############################################################
-# 让我们看看 numpy 数组是怎么改变值的
+# See how the numpy array changed in value.
 
 a.add_(1)
 print(a)
 print(b)
 
 ###############################################################
-# 将 NumPy 数组转换为 Torch Tensor
+# Converting NumPy Array to Torch Tensor
 # ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-# 看看改变 np 数组之后 Torch Tensor 是如何自动改变的
+# See how changing the np array changed the Torch Tensor automatically
 
 import numpy as np
 a = np.ones(5)
@@ -132,15 +166,20 @@ print(a)
 print(b)
 
 ###############################################################
-# 除了 CharTensor 之外, CPU 上的所有 Tensor 都支持与 NumPy 相互转换
+# All the Tensors on the CPU except a CharTensor support converting to
+# NumPy and back.
 #
 # CUDA Tensors
 # ------------
 #
-# 可以使用 ``.cuda`` 方法将 Tensors 转移 GPU 之上
+# Tensors can be moved onto any device using the ``.to`` method.
 
-# 只有当  CUDA 可用时, 我们才可以运行这段代码
+# let us run this cell only if CUDA is available
+# We will use ``torch.device`` objects to move tensors in and out of GPU
 if torch.cuda.is_available():
-    x = x.cuda()
-    y = y.cuda()
-    x + y
+    device = torch.device("cuda")          # a CUDA device object
+    y = torch.ones_like(x, device=device)  # directly create a tensor on GPU
+    x = x.to(device)                       # or just use strings ``.to("cuda")``
+    z = x + y
+    print(z)
+    print(z.to("cpu", torch.double))       # ``.to`` can also change dtype together!
