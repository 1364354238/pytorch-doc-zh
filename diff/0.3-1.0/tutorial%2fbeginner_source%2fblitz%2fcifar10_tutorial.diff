
diff --git a/tutorial/beginner_source/blitz/cifar10_tutorial.py b/tutorial/beginner_source/blitz/cifar10_tutorial.py
index afe4c59..1fe8343 100644
--- a/tutorial/beginner_source/blitz/cifar10_tutorial.py
+++ b/tutorial/beginner_source/blitz/cifar10_tutorial.py
@@ -1,6 +1,6 @@
 # -*- coding: utf-8 -*-
 """
-Training a classifier
+Training a Classifier
 =====================
 
 This is it. You have seen how to define neural networks, compute loss and make
@@ -15,12 +15,12 @@ Generally, when you have to deal with image, text, audio or video data,
 you can use standard python packages that load data into a numpy array.
 Then you can convert this array into a ``torch.*Tensor``.
 
--  For images, packages such as Pillow, OpenCV are useful.
+-  For images, packages such as Pillow, OpenCV are useful
 -  For audio, packages such as scipy and librosa
 -  For text, either raw Python or Cython based loading, or NLTK and
-   SpaCy are useful.
+   SpaCy are useful
 
-Specifically for ``vision``, we have created a package called
+Specifically for vision, we have created a package called
 ``torchvision``, that has data loaders for common datasets such as
 Imagenet, CIFAR10, MNIST, etc. and data transformers for images, viz.,
 ``torchvision.datasets`` and ``torch.utils.data.DataLoader``.
@@ -45,7 +45,7 @@ We will do the following steps in order:
 
 1. Load and normalizing the CIFAR10 training and test datasets using
    ``torchvision``
-2. Define a Convolution Neural Network
+2. Define a Convolutional Neural Network
 3. Define a loss function
 4. Train the network on the training data
 5. Test the network on the test data
@@ -61,7 +61,7 @@ import torchvision.transforms as transforms
 
 ########################################################################
 # The output of torchvision datasets are PILImage images of range [0, 1].
-# We transform them to Tensors of normalized range [-1, 1]
+# We transform them to Tensors of normalized range [-1, 1].
 
 transform = transforms.Compose(
     [transforms.ToTensor(),
@@ -93,6 +93,7 @@ def imshow(img):
     img = img / 2 + 0.5     # unnormalize
     npimg = img.numpy()
     plt.imshow(np.transpose(npimg, (1, 2, 0)))
+    plt.show()
 
 
 # get some random training images
@@ -106,12 +107,11 @@ print(' '.join('%5s' % classes[labels[j]] for j in range(4)))
 
 
 ########################################################################
-# 2. Define a Convolution Neural Network
+# 2. Define a Convolutional Neural Network
 # ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 # Copy the neural network from the Neural Networks section before and modify it to
 # take 3-channel images (instead of 1-channel images as it was defined).
 
-from torch.autograd import Variable
 import torch.nn as nn
 import torch.nn.functional as F
 
@@ -141,7 +141,7 @@ net = Net()
 ########################################################################
 # 3. Define a Loss function and optimizer
 # ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-# Let's use a Classification Cross-Entropy loss and SGD with momentum
+# Let's use a Classification Cross-Entropy loss and SGD with momentum.
 
 import torch.optim as optim
 
@@ -154,7 +154,7 @@ optimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9)
 #
 # This is when things start to get interesting.
 # We simply have to loop over our data iterator, and feed the inputs to the
-# network and optimize
+# network and optimize.
 
 for epoch in range(2):  # loop over the dataset multiple times
 
@@ -163,9 +163,6 @@ for epoch in range(2):  # loop over the dataset multiple times
         # get the inputs
         inputs, labels = data
 
-        # wrap them in Variable
-        inputs, labels = Variable(inputs), Variable(labels)
-
         # zero the parameter gradients
         optimizer.zero_grad()
 
@@ -176,7 +173,7 @@ for epoch in range(2):  # loop over the dataset multiple times
         optimizer.step()
 
         # print statistics
-        running_loss += loss.data[0]
+        running_loss += loss.item()
         if i % 2000 == 1999:    # print every 2000 mini-batches
             print('[%d, %5d] loss: %.3f' %
                   (epoch + 1, i + 1, running_loss / 2000))
@@ -207,14 +204,14 @@ print('GroundTruth: ', ' '.join('%5s' % classes[labels[j]] for j in range(4)))
 ########################################################################
 # Okay, now let us see what the neural network thinks these examples above are:
 
-outputs = net(Variable(images))
+outputs = net(images)
 
 ########################################################################
 # The outputs are energies for the 10 classes.
-# Higher the energy for a class, the more the network
+# The higher the energy for a class, the more the network
 # thinks that the image is of the particular class.
 # So, let's get the index of the highest energy:
-_, predicted = torch.max(outputs.data, 1)
+_, predicted = torch.max(outputs, 1)
 
 print('Predicted: ', ' '.join('%5s' % classes[predicted[j]]
                               for j in range(4)))
@@ -226,12 +223,13 @@ print('Predicted: ', ' '.join('%5s' % classes[predicted[j]]
 
 correct = 0
 total = 0
-for data in testloader:
-    images, labels = data
-    outputs = net(Variable(images))
-    _, predicted = torch.max(outputs.data, 1)
-    total += labels.size(0)
-    correct += (predicted == labels).sum()
+with torch.no_grad():
+    for data in testloader:
+        images, labels = data
+        outputs = net(images)
+        _, predicted = torch.max(outputs.data, 1)
+        total += labels.size(0)
+        correct += (predicted == labels).sum().item()
 
 print('Accuracy of the network on the 10000 test images: %d %%' % (
     100 * correct / total))
@@ -246,15 +244,16 @@ print('Accuracy of the network on the 10000 test images: %d %%' % (
 
 class_correct = list(0. for i in range(10))
 class_total = list(0. for i in range(10))
-for data in testloader:
-    images, labels = data
-    outputs = net(Variable(images))
-    _, predicted = torch.max(outputs.data, 1)
-    c = (predicted == labels).squeeze()
-    for i in range(4):
-        label = labels[i]
-        class_correct[label] += c[i]
-        class_total[label] += 1
+with torch.no_grad():
+    for data in testloader:
+        images, labels = data
+        outputs = net(images)
+        _, predicted = torch.max(outputs, 1)
+        c = (predicted == labels).squeeze()
+        for i in range(4):
+            label = labels[i]
+            class_correct[label] += c[i].item()
+            class_total[label] += 1
 
 
 for i in range(10):
@@ -268,22 +267,35 @@ for i in range(10):
 #
 # Training on GPU
 # ----------------
-# Just like how you transfer a Tensor on to the GPU, you transfer the neural
+# Just like how you transfer a Tensor onto the GPU, you transfer the neural
 # net onto the GPU.
-# This will recursively go over all modules and convert their parameters and
-# buffers to CUDA tensors:
+#
+# Let's first define our device as the first visible cuda device if we have
+# CUDA available:
+
+device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
+
+# Assuming that we are on a CUDA machine, this should print a CUDA device:
+
+print(device)
+
+########################################################################
+# The rest of this section assumes that ``device`` is a CUDA device.
+#
+# Then these methods will recursively go over all modules and convert their
+# parameters and buffers to CUDA tensors:
 #
 # .. code:: python
 #
-#     net.cuda()
+#     net.to(device)
 #
 #
 # Remember that you will have to send the inputs and targets at every step
 # to the GPU too:
 #
-# ::
+# .. code:: python
 #
-#         inputs, labels = Variable(inputs.cuda()), Variable(labels.cuda())
+#         inputs, labels = inputs.to(device), labels.to(device)
 #
 # Why dont I notice MASSIVE speedup compared to CPU? Because your network
 # is realllly small.
@@ -320,4 +332,8 @@ for i in range(10):
 # .. _More examples: https://github.com/pytorch/examples
 # .. _More tutorials: https://github.com/pytorch/tutorials
 # .. _Discuss PyTorch on the Forums: https://discuss.pytorch.org/
-# .. _Chat with other users on Slack: http://pytorch.slack.com/messages/beginner/
+# .. _Chat with other users on Slack: https://pytorch.slack.com/messages/beginner/
+
+# %%%%%%INVISIBLE_CODE_BLOCK%%%%%%
+del dataiter
+# %%%%%%INVISIBLE_CODE_BLOCK%%%%%%
