
diff --git a/tutorial/beginner_source/examples_nn/two_layer_net_nn.py b/tutorial/beginner_source/examples_nn/two_layer_net_nn.py
index 7420ad7..51bf623 100644
--- a/tutorial/beginner_source/examples_nn/two_layer_net_nn.py
+++ b/tutorial/beginner_source/examples_nn/two_layer_net_nn.py
@@ -14,20 +14,19 @@ which you can think of as a neural network layer that has produces output from
 input and may have some trainable weights.
 """
 import torch
-from torch.autograd import Variable
 
 # N is batch size; D_in is input dimension;
 # H is hidden dimension; D_out is output dimension.
 N, D_in, H, D_out = 64, 1000, 100, 10
 
-# Create random Tensors to hold inputs and outputs, and wrap them in Variables.
-x = Variable(torch.randn(N, D_in))
-y = Variable(torch.randn(N, D_out), requires_grad=False)
+# Create random Tensors to hold inputs and outputs
+x = torch.randn(N, D_in)
+y = torch.randn(N, D_out)
 
 # Use the nn package to define our model as a sequence of layers. nn.Sequential
 # is a Module which contains other Modules, and applies them in sequence to
 # produce its output. Each Linear Module computes output from input using a
-# linear function, and holds internal Variables for its weight and bias.
+# linear function, and holds internal Tensors for its weight and bias.
 model = torch.nn.Sequential(
     torch.nn.Linear(D_in, H),
     torch.nn.ReLU(),
@@ -36,32 +35,33 @@ model = torch.nn.Sequential(
 
 # The nn package also contains definitions of popular loss functions; in this
 # case we will use Mean Squared Error (MSE) as our loss function.
-loss_fn = torch.nn.MSELoss(size_average=False)
+loss_fn = torch.nn.MSELoss(reduction='sum')
 
 learning_rate = 1e-4
 for t in range(500):
     # Forward pass: compute predicted y by passing x to the model. Module objects
     # override the __call__ operator so you can call them like functions. When
-    # doing so you pass a Variable of input data to the Module and it produces
-    # a Variable of output data.
+    # doing so you pass a Tensor of input data to the Module and it produces
+    # a Tensor of output data.
     y_pred = model(x)
 
-    # Compute and print loss. We pass Variables containing the predicted and true
-    # values of y, and the loss function returns a Variable containing the
+    # Compute and print loss. We pass Tensors containing the predicted and true
+    # values of y, and the loss function returns a Tensor containing the
     # loss.
     loss = loss_fn(y_pred, y)
-    print(t, loss.data[0])
+    print(t, loss.item())
 
     # Zero the gradients before running the backward pass.
     model.zero_grad()
 
     # Backward pass: compute gradient of the loss with respect to all the learnable
     # parameters of the model. Internally, the parameters of each Module are stored
-    # in Variables with requires_grad=True, so this call will compute gradients for
+    # in Tensors with requires_grad=True, so this call will compute gradients for
     # all learnable parameters in the model.
     loss.backward()
 
-    # Update the weights using gradient descent. Each parameter is a Variable, so
-    # we can access its data and gradients like we did before.
-    for param in model.parameters():
-        param.data -= learning_rate * param.grad.data
+    # Update the weights using gradient descent. Each parameter is a Tensor, so
+    # we can access its gradients like we did before.
+    with torch.no_grad():
+        for param in model.parameters():
+            param -= learning_rate * param.grad
